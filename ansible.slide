Ansible - Who Needs Another Automation Framework?
Introduction to the concepts of the Python-based automation framework Ansible

29 April 2014
Tags: ansible, devops

Andreas Pohle (@apoh), Cornelius Keller, Teymour Taghavi

bettermarks DevOps
bmdevops@bettermarks.de

http://www.bettermarks.com
@bettermarks

* Agenda

- Introduction by Cornelius
- Introduction to playbooks by Teymour
- Practical examples by Andreas

We will focus on ansible in this talk and will try to leave the comparison to other tools like puppet or chef up to you, as we have not enough experience with this tools in our team to do so.

Please feel free ask your questions whenever you have them.

* Why Ansible

At the beginning of bettermarks we had outsourced operations to an external contractor. Wich resulted in the following situation about 2 years ago:

- A firewall between devs and ops that was even higher than in companies with seperated Dev and Ops department.
- A Change in the deployment process took weeks or month.
- Devs started to write extra code to work around deployment limitations.
- No intern really knew what happend during the deployment.
- Deploying was a long cost intensive processs.


* So Why Ansible?

- python driven, fits in our environment
- easy to get started
- lightweight (no agents or extra infrastructure required )
- easy to integrate with existing infrastructure like Jenkins
- scales up ( and down )
- playbook syntax is human readable and part of the deployment process documentation


* Easy to get Started

.play virtualenv.sh /begin/,/end/

Takes about 30 seconds and we are ready to go.

See [[http://docs.ansible.com/intro_installation.html]]

* That's all? Really?

Yes, we did setup a usable ansible environment with the two primary ansible commands available:

- *ansible* for ad hoc automation
- *ansible-playbook* to execute playbooks (more on playbooks later)

So we are ready to explore The first cool Feature of Ansible, ad-hoc automation.

* Almost 

Ansible needs its default inventory location to be existent

.play default_inventory.sh /begin/,/end/


* Ad-Hoc automation with ansible

.play simple_adhoc.sh /begin/,/end/

We just executed the simplest possible ansible module *ping* on our local machine.
We will learn more about ansible modules in a few minutes.

* Modules

- scripts with a very simple interface, can be written in any language
- are called with the parameters as key=value pairs
- return json
- are idempotent, i.e. do noting if the desired target state is already there.

For most use cases there are already modules included in ansible, but it is easy to write your own modules.

* Modules Overview

.image images/ansible_modules.png 500 900

[[http://docs.ansible.com/modules_by_category.html]]

* More Ad-Hoc examples with modules

Gathering facts

.play gathering_facts.sh /begin/,/end/

Check out the ansible source code into /tmp

# TODO ansible is to big, takes to long in presentation mode :(

.play git_checkout.sh /begin/,/end/

Delete it again

.play delete_checkout.sh /begin/,/end/

Stop apache running at [[http://localhost/]]:

.play stop_apache.sh /begin/,/end/

Start it again

.play start_apache.sh /begin/,/end/

* Inventory

.code hosts

Ansible's default inventories are files in .ini format. A section corresponds to a host group, in this case *demo*. In this case the four members of demo are obviously the local machine.

An inventory can contain much more then the hostnames. You can also provide variables for hosts or groups in a combination of .ini and .yaml files.

* Ad-Hoc with inventory

First export inventory location (defaults to /etc/anslible/hosts)

.code simple_adhoc_with_inventory.sh /inventory/,/end/

Now we can use the demo group definded in the inventory with ansible

.play simple_adhoc_with_inventory.sh /begin/,/end/

Ansible will execute the ping module in parallel on all machines matching *demo*. You can limit the number of parallel deployments with parameter -f n or --forks=n.

* But .ini files do not scale

If you have to manage , lets say, 700 vms in two data centers .ini and .yaml files will not scale.

* Dynamic inventories

Ansible can read dynamic inventories as an output of a script. So you can plug in your own inventory. We are using a coustom dynamic inventory backed by spacewalk wich is also used for configuration management.

Currently ansible comes with scripts that support following inventory sources (found in the plugins/ folder)

  Amazon EC2
  Cobbler
  BSD Jails
  Digital Ocean
  Google Compute Engine
  Linode
  OpenShift
  OpenStack Nova
  Red Hat's SpaceWalk
  Vagrant (not to be confused with the provisioner in vagrant, which is preferred)
  Zabbix

#Note that at the time when bettermarks started with ansible there was no SpaceWalk script, so we had to write our own script.

see [[http://docs.ansible.com/intro_dynamic_inventory.html]] for more information on dynamic inventories.

* Playbooks

"If Ansible modules are the tools in your workshop, playbooks are your design plans."

Simply put, playbooks are a collection of ansible actions. Additionaly, they provide tools to control the flow of those actions.

A playbook can be used to provision a single machine, orchestrate a set of machines or even an entire cluster.

- Playbooks are human readable, written in YAML.
- Describe the desired state of your infrastructure.

* Anatomy of a Playbook

A playbook consists of one or more *plays*.

Each play has:

- a header section defining hosts and optional variables
- a task section defining the actual tasks to be executed
- an optional handler section containing callbacks to be notified by the tasks.

* Example playbook

.code playbooks/playbook1.yml
.play playbooks/playbook1.sh /begin/,/end/

- each play gathers information about the target hosts before running
- a failed task stops and exits the playbook

* Play Header: Hosts, users and roles

 ---
 - name: Play 1             # Play description
   hosts: demo              # can be either a host or a group of hosts (from the inventory)
   remote_user: user_1      # user used by the ssh connection
   sudo: yes                # execute modules as sudo
   sudo_user: user_2        # sudo user
   roles:                   # roles for the play (more on roles later)
      - role1
      - role2

- the remote_user and sudo_user can be set from outside the playbook with:

  ansible-playbook playbook_file.yml --user user_3 --sudo-user user_4

- users set in the playbook always win

  playbook users > command line users > defaults

- users can be set on task level using the same syntax.

* Tasks

- is defined by a name, a module and a key/value pair

 tasks:
   - name: make sure apache is running
     service: name=httpd state=running

- can ignore errors, otherwise the execution of the playbook will stop on error

 ignore_errors: True

.play playbooks/playbook2.sh /begin/,/end/

- after execution, come back with either of the following states: "ok", "changed" or "failed"

* Handlers

- handlers are defined in the same way as tasks but in the handlers section.
- handlers are only executed if the calling task comes back with the "changed" state

.code playbooks/playbook3.yml
.play playbooks/playbook3.sh /begin/,/end/

.play playbooks/delete_tmp_config.sh /begin/,/end/

* Includes

The include statement allows us to split our playbook into smaller parts, either for re-usability or better overview:

Let's say we have one top-level playbook, "site.yml":

 - include: common.yml
 - include: load_balancers.yml
 - include: webservers.yml
 - include: dbservers.yml

- a play cannot be included into another play. Only tasks can be included into a play.
- roles seem to provide a more powerful way to handle include statements (will be covered later).

* Variables

- can have different origins (playbook, inventory, command line)
- can be a single value, a list or a hashmap/dictionary
- can be recognized by double brackets: {{var_name}}
- support the jinja2 filters system:

  {{var_name}} => /path/to/filename.txt
  {{var_name|basename}} =>  filename.txt

- see [[http://jinja.pocoo.org/docs/templates/#builtin-filters]] for a list of filters


* Variable origins

- defined or included in the playbook (play header):

    vars:
      tmp_dir: /tmp

    vars_file:
      - "vars/common.yml"

- the inventory:

  [demo:vars]
  timeout=30

- the command line:

  ansible-playbook playbook_file.yml -e "var1=value1 var2=value2"

- any variable gathered from the setup module:

.play gathering_facts.sh /begin/,/end/

* Variables example

.code playbooks/playbook4.yml
.play playbooks/playbook4.sh /begin/,/end/

* Loops

- execute a task several times, once for each item in a collection
- the collection can be a list, a hashmap, fileglobs, etc...

The simplest loop is iterating over a list of items:

 - name: a task to add several users
   user: name={{ item }} state=present groups=dev
   with_items:
      - testuser1
      - testuser2

whith_items can also accept a variable:

  with_items: some_list

* More Loops

See  [[http://docs.ansible.com/playbooks_loops.html]] for more complex loop examples including:

- with_nested: nested loops
- with_dict: loops over hashes
- with_fileglob: loops over fileglobs
- with_sequence: loops over integer sequences
- do until loops (along with a retries limit + delay between retries)

* And even more loops!

My personal favorite in ansible is the "register" keyword. In combination with loops, this gives us a powerful tool.

.code playbooks/playbook5.yml
.play playbooks/playbook5.sh /begin/,/end/

* Conditionals

You can use the "when" statement to execute tasks only if certain conditions are met.

 tasks:
   - name: "shutdown Debian flavored systems"
     command: /sbin/shutdown -t now
     when: ansible_os_family == "Debian"

* Conditionals and the register keyword

.code playbooks/playbook6.yml
.play playbooks/playbook6.sh /begin/,/end/
.play playbooks/playbook7.sh /begin/,/end/


* Practical Examples

- Write your own modules
#- Jenkins integration (??)
#- Ansible Tower
- Wordpress deployment

# - heared much details about how is ansible working
# - lets wrap things together
# - introduction how you can write your own modules
# - last but not least, show a live deployment for a wordpress installation

* Write Your Own Modules

- write the modules in any language you want
- only File I/O is required
- any input parameter is a pair of key=value
- output has to be json or key=value results all on one line

 #!/usr/bin/python

 import datetime
 import json

 date = str(datetime.datetime.now())
 print json.dumps({
     "time" : date
 })

# - ansible serves lot of modules for usual tasks in operations or deployment
# - but in some cases you need to write your own modules
# - its very easy to write your own modules
# - you can use any programming language you want just File I/O is required
# - as input parameter you provide your moduel key value pair, wich you can parse in the module
# - output params can be json or pairs of key value, also exit-states will be evalute in the ansible process
# - for python Modules there is a Ansible library to this
# - to run the module in your playbook just add the module file in a path called "library" close to your playbook
# - the name of this file is the name of the task you have to use in the playbook as taskname

* 

In case of a failure

 print json.dumps({
     "failed" : True,
     "msg"    : "failed setting the time"
 })
 sys.exit(1)

In case changes occur while running the module

 print json.dumps({
    "time" : date,
    "changed" : True
 })
 sys.exit(0)

[[http://docs.ansible.com/developing_modules.html]]

# - there some conventions to talk with the notifier of ansible to display the result after running the module
# - when your module is failing you just can return a status-code different from 0
# - in addition u can send the key "failed" and a key "msg" to send information to the notifier
# - its a good style to make sure that your Module ist working idempotent
# - meaning the module will only make changes if the desired state does not exist
# - to inform the notifier that occured some changes, during the runtime just add the key "changed" to the return values
# - more details for developing modules you get at this link

* Wordpress Deployment
.image images/wordpress_setup.png

# - finally lets bring all together in "real world" - cenario
# - in the following setup we've create 4 virtual machnines with vagrant
# - the first one will be a loadbalancer wich is doing round robbin to the webserver
# - in our case we're using a nginx as loadbalancer
# - on the two webservers we will run a wordpress installation with nginx, and php fastcgi process manager
# - the wordpress installations are using a mysql database running on a single machnine

* Files
 .
 ├── hosts                  # inventory file
 ├── site.yml               # master playbook
 ├── group_vars
 │   └── all                # variables
 └── roles                  # this hierarchy represents a "role"
     ├── common
     │   └── tasks
     │       └── main.yml
     ├── db
     │   ├── handlers
     │   │   └── main.yml   # handlers file (restart database)
     │   ├── tasks
     │   │   └── main.yml   # playbook for 'db' role
     │   └── templates      # files for use with the template resource written in jinja2
     │       └── my.cnf
     ├── lb
     │   └── ...
     └── web
         └── ...

# - our project structure is looking like this
# - this is more or less consens to manage a ansible project
# - at first we've our inventory file (lets see later)
# - site.yml ist the master-playbook wich has to be called with the "ansible-playbook" command
# - in group_vars/all we've saved our variables we're using in the playbooks and templates
# - we could also defined variables for each group and each host
# - in the folder 'roles' we're storing the playbooks, handlers and templates of each 'role'
# - the role 'common' we will use on every machnine in our case we just update the package index on the machines
# - in the 'role' 'db' will be used to setup the database (installation, creating database and grant privilleges)

* 

 ...
 └── roles
     ├── common
     │   └── ...
     ├── db
     │   └── ...
     ├── lb
     │   ├── handlers
     │   │   └── main.yml
     │   ├── tasks
     │   │   └── main.yml
     │   └── templates
     │       └── default.conf   # nginx configuration file
     └── web
         ├── handlers
         │   └── main.yml
         ├── tasks
         │   └── main.yml
         └── templates
             ├── default.conf   # nginx configuration file
             ├── wordpress.conf # php fastcgi (php-fpm) configuration file
             └── wp-config.php  # wordpress configuration file

# - the roles 'lb' and 'web' are looking very similar
# - for sure we need some more templates for the webserver deployment

* Inventory

hosts

.code vagrant/hosts

group_vars/all

.code vagrant/group_vars/all

# - lets look into some files
# - in the inventroy file hosts we have defined 3 groups ...
# - also we've currently not register to much variables, just the following


* Master Playbook (site.yml)
.code vagrant/site.yml /MySQL/,/- web/
 ...

# - this is a extract from the master playbook site.yml
# - for the different host groups we've defined different task
# - i.E. we're running the roles 'common' and 'db' for the database machine
# - the user we're using to deploy the dbservers is 'vagrant'
# - we also like to execute the tasks with sudo privilleges
# - the tasks for the other machines are looking very similar

* Loadbalancer Deployment

.code vagrant/roles/lb/tasks/main.yml /name/,/restart/

.code vagrant/roles/lb/handlers/main.yml /name/,/service/

.code vagrant/roles/lb/templates/default.conf /upstream/,/proxy_pass/

# - quickly lets go into the detail of the files we're using for the 'lb' role
# - on the top your seeing the task playbook including two tasks
# - in the first task we're using the module 'apt' to make sure the package nginx is installed on the system
# - in the second taks we're copy the jinga2-template after redering it to the desired destination
# - in the handlers-file you see in the middle of this slide we registered on handler to restart the apache
# - the handler will be triggerd after the template-task notifies a "change"
# - on the bottom you see the jinja2 template wich will render the nginx config
# - in line 2 we're looping over the group of 'webservers' to register every in the loadbalancer
# - the rest is almost a typical nginx config

* Live-Demo

* Thank you for listening

If you want to hear more about ansible or talk to our devops:

- grep some beer and food in the break
- meet us at the fossball table in the kitchen.

