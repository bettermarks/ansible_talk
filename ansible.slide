Ansible - who needs another automation framework?
introduction to the concepts of the python based automation framework ANSIBLE
29 Apr 2014
Tags: ansible, devops

Andreas Pohle (@apoh), Cornelius Keller, Teymour Taghavi
by bettermarks DevOps Team
bmdevops@bettermarks.de
http://www.bettermarks.com
@bettermarks

* Agenda

Motivation

- Why
- Features

* Easy to get Started

.play virtualenv.sh /begin/,/end/

Takes about 30 seconds and we are ready to go.

See [[http://docs.ansible.com/intro_installation.html]]

* That's all? Really?

Yes, we did setup a usable ansible environment with the two primary ansible commands available:

- *ansible* for ad hoc automation
- *ansible-playbook* to execute playbooks (more on playbooks later)

So we are ready to explore The first cool Feature of Ansible, ad-hoc automation.

* Ad-Hoc automation with ansible

.play simple_adhoc.sh /begin/,/end/

We just executed the simplest possible ansible module *ping* on our local machine.
We will learn more about ansible modules in a few minutes.

* Modules

- scripts with a very simple interface, can be written in any language
- are called with the parameters as key=value pairs
- return json
- are idempotent, i.e. do noting if the desired target state is already there.

For most use cases there are already modules included in ansible, but it is easy to write your own modules.

* 
.image images/ansible_modules.png

[[http://docs.ansible.com/modules_by_category.html]]

* More Ad-Hoc examples with modules

Gathering facts

.play gathering_facts.sh /begin/,/end/

Check out the ansible source code into /tmp

# TODO ansible is to big, takes to long in presentation mode :(

.play git_checkout.sh /begin/,/end/

Delete it again

.play delete_checkout.sh /begin/,/end/

Stop apache running at [[http://localhost/]]:

.play stop_apache.sh /begin/,/end/

Start it again

.play start_apache.sh /begin/,/end/

* Inventory

.code hosts

Ansible's default inventories are files in .ini format. A section corresponds to a host group, in this case *demo*. In this case the four members of demo are obviously the local machine.

An inventory can contain much more then the hostnames. You can also provide variables for hosts or groups in a combination of .ini and .yaml files.

* Ad-Hoc with inventory

First export inventory location (defaults to /etc/anslible/hosts)

.code simple_adhoc_with_inventory.sh /inventory/,/end/

Now we can use the demo group definded in the inventory with ansible

.play simple_adhoc_with_inventory.sh /begin/,/end/

Ansible will execute the ping module in parallel on all machines matching *demo*. You can limit the number of parallel deployments with parameter -f n or --forks=n.

* But .ini files do not scale

If you have to manage , lets say, 700 vms in two data centers .ini and .yaml files will not scale.

* Dynamic inventories

Ansible can read dynamic inventories as an output of a script. So you can plug in your own inventory.

Currently ansible comes with scripts that support following inventory sources (found in the plugins/ folder)

  Amazon EC2
  Cobbler
  BSD Jails
  Digital Ocean
  Google Compute Engine
  Linode
  OpenShift
  OpenStack Nova
  Red Hat's SpaceWalk
  Vagrant (not to be confused with the provisioner in vagrant, which is preferred)
  Zabbix

#Note that at the time when bettermarks started with ansible there was no SpaceWalk script, so we had to write our own script.

see [[http://docs.ansible.com/intro_dynamic_inventory.html]] for more information on dynamic inventories.

* Playbooks

"If Ansible modules are the tools in your workshop, playbooks are your design plans."

Simply put, playbooks are a collection of ansible actions. Additionaly, they provide tools to control the flow of those actions.

A playbook can be used to provision a single machine, orchestrate a set of machines or even an entire cluster.

- Playbooks are human readable, written in YAML.
- Describe the desired state of your infrastructure.

* Anatomy of a Playbook

A playbook consists of one or more *plays*.

Each play has:

- a header section defining hosts and optional variables
- a task section defining the actual tasks to be executed
- an optional handler section containing callbacks to be notified by the tasks.

* Example playbook

.code playbooks/playbook1.yml
.play playbooks/playbook1.sh /begin/,/end/

* Play Header: Hosts, users and roles

 ---
 - hosts: webservers        # pattern to match inventory
   remote_user: blub        # user used by the ssh connection
   sudo: yes                # use sudo
   sudo_user: blah          # sudo as user
   roles:
      - role1
      - role2


- remote_user is the user used by ssh.
- if sudo: yes is used, the remote user must have sudo privileges.
- sudo_user: execute the play via sudo.
- user can be set on task level using the same syntax.
- roles are reusable playbooks distributed in a defined folder structure ( more on roles later).

* Tasks

- is defined by a name and a module definition

 tasks:
 - name: make sure apache is running
   service: name=httpd state=running

- can ignore errors, otherwise the execution of the playbook will stop on error

 ignore_errors: True

- can notify handlers defined in the handlers section.

 notify:
     - restart memcached
     - restart apache

* Handlers

 handlers:
    - name: restart memcached
      service:  name=memcached state=restarted
    - name: restart apache
      service: name=apache state=restarted

The handlers are defied in the thame way as tasks but in the handlers section. Handlers are only executed if the module called by a task actualy changed something.


* Variables

* Loops

* Standard  Loop Example

 - name: add several users
   user: name={{ item }} state=present groups=wheel
   with_items:
      - testuser1
      - testuser2

with_items: can refer to list defined in the vars section, in a variables file or the inventory.

 with_items: somelist

* More Loops

See  [[http://docs.ansible.com/playbooks_loops.html]] for more complex loop examples including:

- Nested loops
- Loops over hashes
- Loops over fileglobs
- Loops over integer sequences
- etc.

* Conditionals

You can use the when statement to execute tasks only if certain conditions are met. 

 tasks:
   - name: "shutdown Debian flavored systems"
     command: /sbin/shutdown -t now
     when: ansible_os_family == "Debian"


# TODO describe Variables.


* Agenda

Practical Examples

- Write your own Modules
- Jenkins integration (??)
- Ansible Tower
- Live Deployment (??)
- Wordpress deployment

* Write your own modules

- write the modules in any language you want
- only File I/O is required
- any input parameter is a pair of key=value
- output has to be json or key=value results all on one line

 #!/usr/bin/python
 
 import datetime
 import json
 
 date = str(datetime.datetime.now())
 print json.dumps({
     "time" : date
 })

* 

when something failed in the module

 print json.dumps({
     "failed" : True,
     "msg"    : "failed setting the time"
 })
 sys.exit(1)

when something changed during running the module

 print json.dumps({
    "time" : date,
    "changed" : True
 })
 sys.exit(0)

[[http://docs.ansible.com/developing_modules.html]]
